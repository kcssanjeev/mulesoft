<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Database to Salesforce Account Migration</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
This template helps you migrate accounts from a database to a Salesforce instance, 
specify a filtering criteria, and specify a behavior when an account already exists in the destination instance. 

This template leverages the batch module.
The batch job is divided into *Process* and *On Complete* stages.
Migration process starts from fetching all the existing accounts that match the filter criteria from the Database.
Each database account is filtered depending if the database account also has an existing matching account in Salesforce.
The last step of the *Process* stage groups the accounts and upserts them into the Salesforce instance based on the Name.
Finally during the *On Complete* stage, the template outputs statistics data into the console and sends a notification email with the results of the batch execution. 
		</section>
		<section id="considerations">
<![CDATA[
To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both source (Database) and destination (Salesforce) systems, that must be made in order for all to run smoothly. 
Failing to do so could lead to unexpected behavior of the template.

This template illustrates the migration use case between a database and Salesforce, thus it requires a database instance to work.
]]>
		</section>
		<section id="run_it">
<![CDATA[

**Note:** This template illustrates how to migrate between Salesforce and a database, which
requires a Database instance to work. The template comes packaged with a SQL script to create 
the database table that uses. It is your responsibility to use the script to create the 
table in an available schema and change the configuration accordingly. The SQL script file 
can be found in src/main/resources/account.sql.

This template is customized for MySQL. To use it with different SQL implementation, some changes are necessary:

* Update the SQL script dialect to desired one.
* Replace MySQL driver library (or add another) dependency to desired one in the pom.xml file.
* Update Database Config to suitable connection instead of `db:my-sql-connection` in global elements (config.xml).
* Update connection configurations in `mule.*.properties` file.
]]>
		</section>
		<section id="running_on_standalone">
<![CDATA[
After this, to trigger the use case you need to browse to the local HTTP connector with the port you configured in your file. For instance, for `9090` browse to `http://localhost:9090/migrateaccounts` and this outputs a summary report and sends it to the emails configured.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[

Once your app is all set and started, if you choose as a domain name `db2sfdcaccountmigration` to trigger the use case, browse to `http://db2sfdcaccountmigration.cloudhub.io/migrateaccounts` and report is sent to the emails configured.]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
**HTTP Connector Configuration**
+ http.port `9090`

**Batch Aggregator Configuration**
+ page.size `1000`

**Database Connector Configuration**

+ db.host `localhost`
+ db.port `3306`
+ db.user `user-nameA`
+ db.password `user-passwordA`
+ db.databasename `dbnameA`

**SalesForce Connector Configuration**

+ sfdc.username `joan.baez@org`
+ sfdc.password `JoanBaez456`
+ sfdc.securityToken `ces56arl7apQs56XTddf34X`

**SMTP Services configuration**

+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `email%40example.com`
+ smtp.password `password` 

**Email Details**

+ mail.from `batch.migrateaccounts.migration%40mulesoft.com`
+ mail.to `your.email@gmail.com`
+ mail.subject `Batch Job Finished Report`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API calls that can be made. Therefore calculating this amount is important. This template's calls to the API can be calculated using this formula:

***1 + X / ${page.size}***

***X*** is the number of Accounts to be synchronized on each run. 

Divide by ***${page.size}*** because, by default, accounts are gathered in groups of ${page.size} for each upsert API call in the commit step. Also consider that this calls are executed repeatedly every polling cycle.	

For instance if 10 records are fetched from an origin instance, then 11 API calls are made (1 + 10).
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is the file where you find the inbound and outbound sides of your integration app.
This template has only an HTTP Listener connector as the way to trigger the use case.

**HTTP Listener Connector** - Start Report Generation

+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `migrateaccounts` that you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration is `localhost`. CloudHub routes requests from your application domain URL to the endpoint.
+ The endpoint is a *request-response* and a result of calling it is the response with the total records fetched by the criteria specified.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
The functional aspect of this template e is implemented on this XML, directed by one flow responsible of excecuting the logic.
For the pourpose of this template, the *mainFlow* excecutes a batch job that handles all its logic.
This flow has an exception strategy that basically consists on invoking the *defaultChoiseExceptionStrategy* defined in the *errorHandling.xml* file.
]]>
		</section>
	</sections>
</configuration>
